Base.precompile(Tuple{typeof(Base.print),Base.GenericIOBuffer{Array{UInt8,1}}, Shortstep})
Base.precompile(Tuple{Core.kwftype(typeof(frank_wolfe)),NamedTuple{(:max_iteration, :line_search, :L, :print_iter, :emphasis, :verbose, :trajectory), Tuple{Int64, Shortstep, Int64, Float64, Emphasis, Bool, Bool}},typeof(frank_wolfe),Function,Function,ProbabilitySimplexOracle{Float64},Vector{Float64}})   # time: 0.28827453
Base.precompile(Tuple{Core.kwftype(typeof(frank_wolfe)),NamedTuple{(:max_iteration, :line_search, :L, :print_iter, :emphasis, :verbose, :epsilon, :trajectory), Tuple{Int64, Agnostic, Int64, Float64, Emphasis, Bool, Float64, Bool}},typeof(frank_wolfe),Function,Function,ProbabilitySimplexOracle{Float64},ScaledHotVector{Float64}})   # time: 0.38316718
Base.precompile(Tuple{typeof(print),IOBuffer,Shortstep})   # time: 0.009745528
Base.precompile(Tuple{typeof(print),IOBuffer,Agnostic})   # time: 0.039685145
Base.precompile(Tuple{typeof(print_callback),Tuple{String, String, Float64, Float64, Float64, Float64, Float64},String})   # time: 0.005003308
Base.precompile(Tuple{Core.kwftype(typeof(print_callback)),NamedTuple{(:print_header,), Tuple{Bool}},typeof(print_callback),Vector{String},String})   # time: 0.001166138
Base.precompile(Tuple{Core.kwftype(typeof(frank_wolfe)),NamedTuple{(:epsilon, :max_iteration, :print_iter, :trajectory, :verbose, :linesearch_tol, :line_search, :emphasis, :gradient), Tuple{Float64, Int64, Float64, Bool, Bool, Float64, Adaptive, Emphasis, SparseArrays.SparseMatrixCSC{Float64, Int64}}},typeof(frank_wolfe),Function,Function,NuclearNormLMO{Float64},RankOneMatrix{Float64, Vector{Float64}, Vector{Float64}}})   # time: 3.9857857
Base.precompile(Tuple{typeof(line_search_wrapper),Adaptive,Int64,Function,Function,Matrix{Float64},Matrix{Float64},SparseArrays.SparseMatrixCSC{Float64, Int64},Float64,Float64,Int64,Float64,Int64,Float64})   # time: 0.21974504
Base.precompile(Tuple{typeof(print),IOBuffer,Adaptive})   # time: 0.03642198
Base.precompile(Tuple{typeof(print_callback),Tuple{String, String, Float64, Any, Any, Float64, Float64},String})   # time: 0.00481568
Base.precompile(Tuple{Core.kwftype(typeof(frank_wolfe)),NamedTuple{(:max_iteration, :line_search, :L, :print_iter, :emphasis, :verbose, :epsilon, :trajectory), Tuple{Int64, Adaptive, Int64, Float64, Emphasis, Bool, Float64, Bool}},typeof(frank_wolfe),Function,Function,KSparseLMO{Float64},SparseVector{Float64, Int64}})   # time: 2.12536
Base.precompile(Tuple{typeof(line_search_wrapper),Adaptive,Int64,Function,Function,SparseVector{Float64, Int64},SparseVector{Float64, Int64},SparseVector{Float64, Int64},Float64,Float64,Int64,Float64,Int64,Float64})   # time: 0.010285528
Base.precompile(Tuple{Core.kwftype(typeof(frank_wolfe)),NamedTuple{(:max_iteration, :line_search, :L, :print_iter, :emphasis, :verbose, :trajectory), Tuple{Int64, Shortstep, Int64, Float64, Emphasis, Bool, Bool}},typeof(frank_wolfe),Function,Function,KSparseLMO{Float64},SparseVector{Float64, Int64}})   # time: 0.27901062
Base.precompile(Tuple{Core.kwftype(typeof(frank_wolfe)),NamedTuple{(:max_iteration, :line_search, :print_iter, :epsilon, :emphasis, :trajectory, :verbose), Tuple{Int64, Adaptive, Float64, Float64, Emphasis, Bool, Bool}},typeof(frank_wolfe),Function,Function,BirkhoffPolytopeLMO,SparseArrays.SparseMatrixCSC{Float64, Int64}})   # time: 1.8963768
Base.precompile(Tuple{Core.kwftype(typeof(frank_wolfe)),NamedTuple{(:max_iteration, :line_search, :print_iter, :verbose, :emphasis), Tuple{Int64, Agnostic, Float64, Bool, Emphasis}},typeof(frank_wolfe),Function,Function,ProbabilitySimplexOracle{Rational{BigInt}},ScaledHotVector{Rational{BigInt}}})   # time: 0.4049498
Base.precompile(Tuple{Core.kwftype(typeof(frank_wolfe)),NamedTuple{(:max_iteration, :line_search, :print_iter, :verbose), Tuple{Float64, Nonconvex, Float64, Bool}},typeof(frank_wolfe),Function,Function,ProbabilitySimplexOracle{Float64},Vector{Float64}})   # time: 0.050085537
Base.precompile(Tuple{Core.kwftype(typeof(blended_conditional_gradient)),NamedTuple{(:max_iteration, :L, :line_search, :print_iter, :linesearch_tol, :emphasis, :trajectory, :verbose), Tuple{Int64, Int64, Adaptive, Float64, Float64, Emphasis, Bool, Bool}},typeof(blended_conditional_gradient),Function,Function,BirkhoffPolytopeLMO,SparseArrays.SparseMatrixCSC{Float64, Int64}})   # time: 1.0821986
Base.precompile(Tuple{Core.kwftype(typeof(blended_conditional_gradient)),NamedTuple{(:epsilon, :max_iteration, :line_search, :print_iter, :hessian, :emphasis, :L, :accelerated, :verbose, :trajectory, :K, :weight_purge_threshold), Tuple{Float64, Int64, Adaptive, Float64, Matrix{Float64}, Emphasis, Float64, Bool, Bool, Bool, Float64, Float64}},typeof(blended_conditional_gradient),Function,Function,ProbabilitySimplexOracle{Float64},ScaledHotVector{Float64}})   # time: 1.6108496
Base.precompile(Tuple{Core.kwftype(typeof(print_callback)),NamedTuple{(:print_header,), Tuple{Bool}},typeof(print_callback),NTuple{9, String},String})   # time: 0.003715479
Base.precompile(Tuple{Core.kwftype(typeof(away_frank_wolfe)),NamedTuple{(:max_iteration, :line_search, :print_iter, :epsilon, :emphasis, :verbose, :trajectory, :lazy), Tuple{Int64, Adaptive, Float64, Float64, Emphasis, Bool, Bool, Bool}},typeof(away_frank_wolfe),Function,Function,KSparseLMO{Float64},SparseVector{Float64, Int64}})   # time: 0.5071988
Base.precompile(Tuple{Core.kwftype(typeof(print_callback)),NamedTuple{(:print_header,), Tuple{Bool}},typeof(print_callback),NTuple{8, String},String})   # time: 0.003825618
Base.precompile(Tuple{typeof(active_set_update!),ActiveSet{ScaledHotVector{Float64}, Float64, SparseVector{Float64, Int64}},Float64,ScaledHotVector{Float64},Bool,Int64})   # time: 0.02599051
Base.precompile(Tuple{typeof(active_set_update!),ActiveSet{ScaledHotVector{Float64}, Float64, SparseVector{Float64, Int64}},BigFloat,ScaledHotVector{Float64},Bool,Int64})   # time: 0.025380524
Base.precompile(Tuple{typeof(active_set_update!),ActiveSet{ScaledHotVector{Float64}, Float64, SparseVector{Float64, Int64}},Int64,ScaledHotVector{Float64},Bool,Int64})   # time: 0.023262447
Base.precompile(Tuple{typeof(line_search_wrapper),Adaptive,Int64,Function,Function,SparseVector{Float64, Int64},Vector{Float64},Vector{Float64},Float64,Float64,Int64,Float64,Int64,Float64})   # time: 0.014568289
Base.precompile(Tuple{typeof(line_search_wrapper),Adaptive,Int64,Function,Function,SparseVector{Float64, Int64},Vector{Float64},Vector{Float64},Float64,Float64,Int64,Float64,Int64,Int64})   # time: 0.01240859
Base.precompile(Tuple{Core.kwftype(typeof(lazy_afw_step)),NamedTuple{(:K,), Tuple{Float64}},typeof(lazy_afw_step),SparseVector{Float64, Int64},Vector{Float64},LpNormLMO{Float64, 1},ActiveSet{ScaledHotVector{Float64}, Float64, SparseVector{Float64, Int64}},Float64})   # time: 0.01069944
Base.precompile(Tuple{typeof(print_callback),Tuple{String, String, Float64, Float64, Float64, Float64, Float64, Int64},String})   # time: 0.004592817
Base.precompile(Tuple{typeof(afw_step),SparseVector{Float64, Int64},Vector{Float64},LpNormLMO{Float64, 1},ActiveSet{ScaledHotVector{Float64}, Float64, SparseVector{Float64, Int64}}})   # time: 0.002910835
Base.precompile(Tuple{typeof(fw_step),SparseVector{Float64, Int64},Vector{Float64},LpNormLMO{Float64, 1}})   # time: 0.001129889
Base.precompile(Tuple{Core.kwftype(typeof(lazified_conditional_gradient)),NamedTuple{(:max_iteration, :L, :line_search, :print_iter, :emphasis, :verbose), Tuple{Int64, Int64, Adaptive, Float64, Emphasis, Bool}},typeof(lazified_conditional_gradient),Function,Function,KSparseLMO{Float64},SparseVector{Float64, Int64}})   # time: 3.9177554
Base.precompile(Tuple{Type{MultiCacheLMO{_A, KSparseLMO{Float64}, _B}} where {_A, _B},KSparseLMO{Float64}})   # time: 0.012864536
Base.precompile(Tuple{Type{VectorCacheLMO{KSparseLMO{Float64}, _A}} where _A,KSparseLMO{Float64}})   # time: 0.011564771
Base.precompile(Tuple{typeof(line_search_wrapper),Adaptive,Int64,Function,Function,Any,Any,SparseArrays.SparseMatrixCSC{Float64, Int64},Any,Any,Int64,Float64,Int64,Float64})   # time: 0.45071155
Base.precompile(Tuple{Core.kwftype(typeof(compute_extreme_point)),NamedTuple{(:threshold, :greedy), Tuple{Float64, Bool}},typeof(compute_extreme_point),MultiCacheLMO{_A, NuclearNormLMO{Float64}, RankOneMatrix{Float64, Vector{Float64}, Vector{Float64}}} where _A,SparseArrays.SparseMatrixCSC{Float64, Int64}})   # time: 0.022829248
Base.precompile(Tuple{Type{MultiCacheLMO{_A, NuclearNormLMO{Float64}, RankOneMatrix{Float64, Vector{Float64}, Vector{Float64}}}} where _A,NuclearNormLMO{Float64}})   # time: 0.007260614
Base.precompile(Tuple{Type{MultiCacheLMO{_A, NuclearNormLMO{Float64}, _B}} where {_A, _B},NuclearNormLMO{Float64}})   # time: 0.007219895
Base.precompile(Tuple{Core.kwftype(typeof(compute_extreme_point)),NamedTuple{(:threshold, :greedy), _A} where _A<:Tuple{Any, Bool},typeof(compute_extreme_point),VectorCacheLMO{NuclearNormLMO{Float64}, RankOneMatrix{Float64, Vector{Float64}, Vector{Float64}}},SparseArrays.SparseMatrixCSC{Float64, Int64}})   # time: 0.006727726
Base.precompile(Tuple{Type{VectorCacheLMO{NuclearNormLMO{Float64}, _A}} where _A,NuclearNormLMO{Float64}})   # time: 0.00658588
Base.precompile(Tuple{Core.kwftype(typeof(compute_extreme_point)),NamedTuple{(:threshold, :greedy), Tuple{Float64, Bool}},typeof(compute_extreme_point),VectorCacheLMO{NuclearNormLMO{Float64}, RankOneMatrix{Float64, Vector{Float64}, Vector{Float64}}},SparseArrays.SparseMatrixCSC{Float64, Int64}})   # time: 0.006375383
Base.precompile(Tuple{Core.kwftype(typeof(compute_extreme_point)),NamedTuple{(:threshold, :greedy), _A} where _A<:Tuple{Any, Bool},typeof(compute_extreme_point),MultiCacheLMO{_A, NuclearNormLMO{Float64}, RankOneMatrix{Float64, Vector{Float64}, Vector{Float64}}} where _A,SparseArrays.SparseMatrixCSC{Float64, Int64}})   # time: 0.005405074
Base.precompile(Tuple{typeof(length),MultiCacheLMO{_A, NuclearNormLMO{Float64}, RankOneMatrix{Float64, Vector{Float64}, Vector{Float64}}} where _A})   # time: 0.005332928
Base.precompile(Tuple{typeof(print_callback),Tuple{String, String, Float64, Any, Any, Float64, Float64, Any},String})   # time: 0.004790049
Base.precompile(Tuple{typeof(print_callback),Tuple{String, String, Any, Any, Any, Float64, Float64, Any},String})   # time: 0.001412537
Base.precompile(Tuple{typeof(fast_dot),SparseArrays.SparseMatrixCSC{BigFloat, Int64},Matrix{T} where T})   # time: 0.010672705
Base.precompile(Tuple{typeof(active_set_update_iterate_pairwise!),ActiveSet{SparseVector{Float64, Int64}, Float64, SparseVector{Float64, Int64}},Float64,SparseVector{Float64, Int64},SparseVector{Float64, Int64}})   # time: 0.08547271
Base.precompile(Tuple{typeof(active_set_initialize!),ActiveSet{SparseVector{Float64, Int64}, Float64, SparseVector{Float64, Int64}},SparseVector{Float64, Int64}})   # time: 0.06373713
Base.precompile(Tuple{typeof(active_set_update_iterate_pairwise!),ActiveSet{SparseVector{Float64, Int64}, Float64, SparseVector{Float64, Int64}},BigFloat,SparseVector{Float64, Int64},SparseVector{Float64, Int64}})   # time: 0.049117424
Base.precompile(Tuple{typeof(active_set_update_iterate_pairwise!),ActiveSet{SparseVector{Float64, Int64}, Float64, SparseVector{Float64, Int64}},Int64,SparseVector{Float64, Int64},SparseVector{Float64, Int64}})   # time: 0.04757917
Base.precompile(Tuple{Core.kwftype(typeof(away_frank_wolfe)),NamedTuple{(:max_iteration, :line_search, :print_iter, :emphasis, :verbose, :epsilon, :trajectory, :away_steps), Tuple{Int64, Adaptive, Float64, Emphasis, Bool, Float64, Bool, Bool}},typeof(away_frank_wolfe),Function,Function,KSparseLMO{Float64},SparseVector{Float64, Int64}})   # time: 0.003758145
Base.precompile(Tuple{Core.kwftype(typeof(away_frank_wolfe)),NamedTuple{(:max_iteration, :line_search, :print_iter, :epsilon, :emphasis, :verbose, :away_steps, :trajectory), Tuple{Int64, Adaptive, Float64, Float64, Emphasis, Bool, Bool, Bool}},typeof(away_frank_wolfe),Function,Function,KSparseLMO{Float64},SparseVector{Float64, Int64}})   # time: 0.003852925
Base.precompile(Tuple{Core.kwftype(typeof(away_frank_wolfe)),NamedTuple{(:max_iteration, :line_search, :L, :print_iter, :epsilon, :momentum, :emphasis, :verbose, :away_steps, :trajectory), Tuple{Int64, Adaptive, Int64, Float64, Float64, Float64, Emphasis, Bool, Bool, Bool}},typeof(away_frank_wolfe),Function,Function,KSparseLMO{Float64},SparseVector{Float64, Int64}})   # time: 0.10256607
Base.precompile(Tuple{Core.kwftype(typeof(away_frank_wolfe)),NamedTuple{(:max_iteration, :line_search, :L, :print_iter, :epsilon, :emphasis, :verbose, :away_steps, :trajectory), Tuple{Int64, Adaptive, Int64, Float64, Float64, Emphasis, Bool, Bool, Bool}},typeof(away_frank_wolfe),Function,Function,KSparseLMO{Float64},SparseVector{Float64, Int64}})   # time: 0.26786247
Base.precompile(Tuple{Core.kwftype(typeof(print_callback)),NamedTuple{(:print_header,), Tuple{Bool}},typeof(print_callback),NTuple{8, String},String})   # time: 0.003371646
Base.precompile(Tuple{typeof(print_callback),Tuple{String, String, Float64, Float64, Float64, Float64, Float64, Int64},String})   # time: 0.001354916
Base.precompile(Tuple{Core.kwftype(typeof(frank_wolfe)),NamedTuple{(:max_iteration, :line_search, :print_iter, :emphasis, :verbose, :trajectory), Tuple{Int64, Agnostic, Float64, Emphasis, Bool, Bool}},typeof(frank_wolfe),Function,Function,LpNormLMO{Float64, 1},SparseVector{Float64, Int64}})   # time: 0.08101941
Base.precompile(Tuple{Core.kwftype(typeof(frank_wolfe)),NamedTuple{(:max_iteration, :line_search, :L, :print_iter, :emphasis, :verbose, :trajectory), Tuple{Int64, Adaptive, Int64, Float64, Emphasis, Bool, Bool}},typeof(frank_wolfe),Function,Function,LpNormLMO{Float64, 1},SparseVector{Float64, Int64}})   # time: 0.105804935
Base.precompile(Tuple{Core.kwftype(typeof(frank_wolfe)),NamedTuple{(:max_iteration, :line_search, :L, :print_iter, :emphasis, :verbose, :trajectory, :momentum), Tuple{Int64, Shortstep, Int64, Float64, Emphasis, Bool, Bool, Float64}},typeof(frank_wolfe),Function,Function,LpNormLMO{Float64, 1},SparseVector{Float64, Int64}})   # time: 0.13679837
Base.precompile(Tuple{Core.kwftype(typeof(frank_wolfe)),NamedTuple{(:max_iteration, :line_search, :L, :print_iter, :emphasis, :verbose, :trajectory), Tuple{Int64, Shortstep, Int64, Float64, Emphasis, Bool, Bool}},typeof(frank_wolfe),Function,Function,LpNormLMO{Float64, 1},SparseVector{Float64, Int64}})   # time: 0.0746542
Base.precompile(Tuple{getfield(FrankWolfe, Symbol("#push_trajectory!#9")),NamedTuple{(:t, :primal, :dual, :dual_gap, :time, :x, :v, :gamma), Tuple{Int64, Float64, Float64, Float64, Float64, SparseVector{Float64, Int64}, SparseVector{Float64, Int64}, Float64}}})   # time: 0.07264675
Base.precompile(Tuple{typeof(dot),ScaledHotVector{Rational{BigInt}},ScaledHotVector{Rational{BigInt}}})   # time: 0.048759744
Base.precompile(Tuple{Core.kwftype(typeof(frank_wolfe)),NamedTuple{(:max_iteration, :line_search, :L, :print_iter, :verbose, :emphasis), Tuple{Int64, RationalShortstep, Int64, Float64, Bool, Emphasis}},typeof(frank_wolfe),Function,Function,ProbabilitySimplexOracle{Rational{BigInt}},ScaledHotVector{Rational{BigInt}}})   # time: 0.21134385
Base.precompile(Tuple{typeof(print),IOBuffer,RationalShortstep})   # time: 0.008633916
Base.precompile(Tuple{Core.kwftype(typeof(frank_wolfe)),NamedTuple{(:max_iteration, :line_search, :print_iter, :emphasis, :verbose), Tuple{Float64, Agnostic, Float64, Emphasis, Bool}},typeof(frank_wolfe),Function,Function,ProbabilitySimplexOracle{Rational{BigInt}},ScaledHotVector{Rational{BigInt}}})   # time: 0.052572276
Base.precompile(Tuple{typeof(print_callback),Tuple{String, String, Float64, Float64, Float64, Float64, Float64, Int64, Int64},String})   # time: 0.005203512
Base.precompile(Tuple{getfield(FrankWolfe, Symbol("#push_trajectory!#9")),NamedTuple{(:t, :primal, :dual, :dual_gap, :time, :x, :v, :active_set_length, :non_simplex_iter), Tuple{Int64, Float64, Float64, Float64, Float64, SparseVector{Float64, Int64}, ScaledHotVector{Float64}, Int64, Int64}}})   # time: 0.010195186
Base.precompile(Tuple{typeof(fast_dot),Any,Vector{Float64}})   # time: 0.003832476
Base.precompile(Tuple{typeof(fast_dot),Any,Vector{ComplexF64}})   # time: 0.0037533
Base.precompile(Tuple{Core.kwftype(typeof(blended_conditional_gradient)),NamedTuple{(:epsilon, :max_iteration, :line_search, :print_iter, :emphasis, :L, :verbose, :trajectory, :K, :weight_purge_threshold), Tuple{Float64, Int64, Adaptive, Float64, Emphasis, Float64, Bool, Bool, Float64, Float64}},typeof(blended_conditional_gradient),Function,Function,ProbabilitySimplexOracle{Float64},ScaledHotVector{Float64}})   # time: 0.27156314
Base.precompile(Tuple{Core.kwftype(typeof(blended_conditional_gradient)),NamedTuple{(:epsilon, :max_iteration, :line_search, :print_iter, :hessian, :emphasis, :L, :accelerated, :verbose, :trajectory, :K, :weight_purge_threshold), Tuple{Float64, Int64, Adaptive, Float64, Matrix{Float64}, Emphasis, Float64, Bool, Bool, Bool, Float64, Float64}},typeof(blended_conditional_gradient),Function,Function,KSparseLMO{Float64},SparseVector{Float64, Int64}})   # time: 0.19815452
Base.precompile(Tuple{Core.kwftype(typeof(blended_conditional_gradient)),NamedTuple{(:epsilon, :max_iteration, :line_search, :print_iter, :emphasis, :L, :verbose, :trajectory, :K, :weight_purge_threshold), Tuple{Float64, Int64, Adaptive, Float64, Emphasis, Float64, Bool, Bool, Float64, Float64}},typeof(blended_conditional_gradient),Function,Function,KSparseLMO{Float64},SparseVector{Float64, Int64}})   # time: 0.13206175
Base.precompile(Tuple{Core.kwftype(typeof(blended_pairwise_conditional_gradient)),NamedTuple{(:epsilon, :max_iteration, :line_search, :print_iter, :emphasis, :L, :verbose, :trajectory), Tuple{Float64, Int64, Adaptive, Float64, Emphasis, Float64, Bool, Bool}},typeof(blended_pairwise_conditional_gradient),Function,Function,KSparseLMO{Float64},SparseVector{Float64, Int64}})   # time: 0.106575735
Base.precompile(Tuple{typeof(fast_dot),SparseVector{BigFloat, Int64},Any})   # time: 0.002146262
Base.precompile(Tuple{typeof(fast_dot),Any,SparseVector{Float64, Int64}})   # time: 0.002042688
Base.precompile(Tuple{Core.kwftype(typeof(lazified_conditional_gradient)),NamedTuple{(:max_iteration, :L, :line_search, :print_iter, :emphasis, :cache_size, :verbose), Tuple{Int64, Int64, Adaptive, Float64, Emphasis, Int64, Bool}},typeof(lazified_conditional_gradient),Function,Function,KSparseLMO{Float64},SparseVector{Float64, Int64}})   # time: 0.9227771
Base.precompile(Tuple{Core.kwftype(typeof(compute_extreme_point)),NamedTuple{(:threshold, :greedy), Tuple{Float64, Bool}},typeof(compute_extreme_point),MultiCacheLMO{500, KSparseLMO{Float64}, SparseVector{Float64, Int64}},SparseVector{Float64, Int64}})   # time: 0.25742963
Base.precompile(Tuple{typeof(length),MultiCacheLMO{500, KSparseLMO{Float64}, SparseVector{Float64, Int64}}})   # time: 0.036646128
Base.precompile(Tuple{Type{MultiCacheLMO{500, KSparseLMO{Float64}, SparseVector{Float64, Int64}}},KSparseLMO{Float64}})   # time: 0.03627382
Base.precompile(Tuple{Core.kwftype(typeof(compute_extreme_point)),NamedTuple{(:threshold, :greedy), Tuple{Float64, Bool}},typeof(compute_extreme_point),MultiCacheLMO{_A, KSparseLMO{Float64}, _B} where {_A, _B},SparseVector{Float64, Int64}})   # time: 0.022596858
Base.precompile(Tuple{Core.kwftype(typeof(compute_extreme_point)),NamedTuple{(:threshold, :greedy), _A} where _A<:Tuple{Any, Bool},typeof(compute_extreme_point),MultiCacheLMO{_A, KSparseLMO{Float64}, _B} where {_A, _B},SparseVector{Float64, Int64}})   # time: 0.009330567
Base.precompile(Tuple{typeof(print_callback),Tuple{String, String, Float64, Any, Any, Float64, Float64, Int64},String})   # time: 0.004769557
Base.precompile(Tuple{typeof(length),MultiCacheLMO{_A, KSparseLMO{Float64}, _B} where {_A, _B}})   # time: 0.00342123
Base.precompile(Tuple{getfield(FrankWolfe, Symbol("#push_trajectory!#9")),NamedTuple{(:t, :primal, :dual, :dual_gap, :time, :x, :v, :gamma), Tuple{Int64, Float64, Float64, Float64, Float64, SparseArrays.SparseMatrixCSC{Float64, Int64}, SparseArrays.SparseMatrixCSC{Float64, Int64}, Float64}}})   # time: 0.046369087
Base.precompile(Tuple{Core.kwftype(typeof(lazified_conditional_gradient)),NamedTuple{(:max_iteration, :epsilon, :line_search, :print_iter, :emphasis, :trajectory, :verbose), Tuple{Int64, Float64, Adaptive, Float64, Emphasis, Bool, Bool}},typeof(lazified_conditional_gradient),Function,Function,BirkhoffPolytopeLMO,SparseArrays.SparseMatrixCSC{Float64, Int64}})   # time: 1.0580478
Base.precompile(Tuple{Type{MultiCacheLMO{_A, BirkhoffPolytopeLMO, _B}} where {_A, _B},BirkhoffPolytopeLMO})   # time: 0.006924912
Base.precompile(Tuple{Type{VectorCacheLMO{BirkhoffPolytopeLMO, _A}} where _A,BirkhoffPolytopeLMO})   # time: 0.00617293
Base.precompile(Tuple{Core.kwftype(typeof(compute_extreme_point)),NamedTuple{(:threshold, :greedy), Tuple{Float64, Bool}},typeof(compute_extreme_point),MultiCacheLMO{500, BirkhoffPolytopeLMO, SparseArrays.SparseMatrixCSC{Float64, Int64}},SparseArrays.SparseMatrixCSC{Float64, Int64}})   # time: 0.25589186
Base.precompile(Tuple{Core.kwftype(typeof(lazified_conditional_gradient)),NamedTuple{(:max_iteration, :line_search, :print_iter, :epsilon, :emphasis, :trajectory, :cache_size, :verbose), Tuple{Int64, Adaptive, Float64, Float64, Emphasis, Bool, Int64, Bool}},typeof(lazified_conditional_gradient),Function,Function,BirkhoffPolytopeLMO,SparseArrays.SparseMatrixCSC{Float64, Int64}})   # time: 0.060838394
Base.precompile(Tuple{typeof(length),MultiCacheLMO{500, BirkhoffPolytopeLMO, SparseArrays.SparseMatrixCSC{Float64, Int64}}})   # time: 0.039786853
Base.precompile(Tuple{Type{MultiCacheLMO{500, BirkhoffPolytopeLMO, SparseArrays.SparseMatrixCSC{Float64, Int64}}},BirkhoffPolytopeLMO})   # time: 0.036974385
Base.precompile(Tuple{Core.kwftype(typeof(compute_extreme_point)),NamedTuple{(:threshold, :greedy), Tuple{Float64, Bool}},typeof(compute_extreme_point),MultiCacheLMO{_A, BirkhoffPolytopeLMO, _B} where {_A, _B},SparseArrays.SparseMatrixCSC{Float64, Int64}})   # time: 0.015717806
Base.precompile(Tuple{Core.kwftype(typeof(compute_extreme_point)),NamedTuple{(:threshold, :greedy), _A} where _A<:Tuple{Any, Bool},typeof(compute_extreme_point),MultiCacheLMO{_A, BirkhoffPolytopeLMO, _B} where {_A, _B},SparseArrays.SparseMatrixCSC{Float64, Int64}})   # time: 0.005551617
Base.precompile(Tuple{typeof(length),MultiCacheLMO{_A, BirkhoffPolytopeLMO, _B} where {_A, _B}})   # time: 0.003511508
Base.precompile(Tuple{Core.kwftype(typeof(away_frank_wolfe)),NamedTuple{(:max_iteration, :line_search, :print_iter, :linesearch_tol, :epsilon, :emphasis, :lazy, :trajectory, :verbose), Tuple{Int64, Adaptive, Float64, Float64, Float64, Emphasis, Bool, Bool, Bool}},typeof(away_frank_wolfe),Function,Function,BirkhoffPolytopeLMO,SparseArrays.SparseMatrixCSC{Float64, Int64}})   # time: 1.474222
Base.precompile(Tuple{Core.kwftype(typeof(blended_conditional_gradient)),NamedTuple{(:max_iteration, :line_search, :print_iter, :linesearch_tol, :epsilon, :emphasis, :trajectory, :verbose), Tuple{Int64, Adaptive, Float64, Float64, Float64, Emphasis, Bool, Bool}},typeof(blended_conditional_gradient),Function,Function,BirkhoffPolytopeLMO,SparseArrays.SparseMatrixCSC{Float64, Int64}})   # time: 0.15114006
Base.precompile(Tuple{Core.kwftype(typeof(lp_separation_oracle)),NamedTuple{(:inplace_loop, :force_fw_step), Tuple{Bool, Bool}},typeof(lp_separation_oracle),BirkhoffPolytopeLMO,ActiveSet{SparseArrays.SparseMatrixCSC{Float64, Int64}, Float64, SparseArrays.SparseMatrixCSC{Float64, Int64}},SparseArrays.SparseMatrixCSC{Float64, Int64},Float64,Float64})   # time: 0.001121428
Base.precompile(Tuple{Core.kwftype(typeof(blended_conditional_gradient)),NamedTuple{(:max_iteration, :line_search, :print_iter, :epsilon, :linesearch_tol, :emphasis, :trajectory, :verbose), Tuple{Int64, Adaptive, Float64, Float64, Float64, Emphasis, Bool, Bool}},typeof(blended_conditional_gradient),Function,Function,BirkhoffPolytopeLMO,SparseArrays.SparseMatrixCSC{Float64, Int64}})   # time: 0.007375554
Base.precompile(Tuple{getfield(FrankWolfe, Symbol("#push_trajectory!#9")),NamedTuple{(:t, :primal, :dual, :dual_gap, :time, :x, :v, :gamma), Tuple{Int64, Float64, Float64, Float64, Float64, SparseVector{Float64, Int64}, ScaledHotVector{Float64}, Rational{Int64}}}})   # time: 0.102111265
Base.precompile(Tuple{Core.kwftype(typeof(away_frank_wolfe)),NamedTuple{(:max_iteration, :line_search, :print_iter, :emphasis, :verbose, :epsilon, :trajectory), Tuple{Int64, Adaptive, Float64, Emphasis, Bool, Float64, Bool}},typeof(away_frank_wolfe),Function,Function,ProbabilitySimplexOracle{Float64},ScaledHotVector{Float64}})   # time: 0.2808833
Base.precompile(Tuple{Core.kwftype(typeof(blended_conditional_gradient)),NamedTuple{(:max_iteration, :line_search, :print_iter, :emphasis, :verbose, :epsilon, :trajectory), Tuple{Int64, Adaptive, Float64, Emphasis, Bool, Float64, Bool}},typeof(blended_conditional_gradient),Function,Function,ProbabilitySimplexOracle{Float64},ScaledHotVector{Float64}})   # time: 0.98842394
Base.precompile(Tuple{Core.kwftype(typeof(lp_separation_oracle)),NamedTuple{(:inplace_loop, :force_fw_step), Tuple{Bool, Bool}},typeof(lp_separation_oracle),ProbabilitySimplexOracle{Float64},ActiveSet{ScaledHotVector{Float64}, Float64, SparseVector{Float64, Int64}},SparseVector{Float64, Int64},Float64,Float64})   # time: 0.001186793
Base.precompile(Tuple{getfield(FrankWolfe, Symbol("#push_trajectory!#9")),NamedTuple{(:t, :primal, :dual, :dual_gap, :time, :x, :v, :gamma), Tuple{Int64, Float64, Float64, Float64, Float64, Vector{Float64}, ScaledHotVector{Float64}, Float64}}})   # time: 0.08607183
Base.precompile(Tuple{getfield(FrankWolfe, Symbol("#push_trajectory!#9")),NamedTuple{(:t, :primal, :dual, :dual_gap, :time, :x, :v, :gamma), Tuple{Int64, Float64, Float64, Float64, Float64, Vector{Float64}, Vector{Float64}, Float64}}})   # time: 0.020447256
Base.precompile(Tuple{typeof(line_search_wrapper),Shortstep,Int64,Function,Function,Vector{Float64},Vector{Float64},Vector{Float64},Float64,Int64,Int64,Float64,Int64,Float64})   # time: 0.003564647
Base.precompile(Tuple{Core.kwftype(typeof(frank_wolfe)),NamedTuple{(:max_iteration, :line_search, :L, :print_iter, :emphasis, :verbose, :trajectory), Tuple{Int64, Shortstep, Int64, Float64, Emphasis, Bool, Bool}},typeof(frank_wolfe),Function,Function,MathOptLMO{MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.AbstractOptimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}},Vector{Float64}})   # time: 5.6999826
Base.precompile(Tuple{Core.kwftype(typeof(frank_wolfe)),NamedTuple{(:max_iteration, :line_search, :L, :print_iter, :emphasis, :verbose, :trajectory), Tuple{Int64, Shortstep, Int64, Float64, Emphasis, Bool, Bool}},typeof(frank_wolfe),Function,Function,ProbabilitySimplexOracle{Float64},ScaledHotVector{Float64}})   # time: 0.6060258
Base.precompile(Tuple{typeof(-),ScaledHotVector{Float64},Vector{Float64}})   # time: 0.03285388
Base.precompile(Tuple{Core.kwftype(typeof(frank_wolfe)),NamedTuple{(:max_iteration, :line_search, :L, :print_iter, :emphasis, :verbose, :trajectory), Tuple{Int64, Shortstep, Int64, Float64, Emphasis, Bool, Bool}},typeof(frank_wolfe),Function,Function,MathOptLMO{MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.AbstractOptimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}},ScaledHotVector{Float64}})   # time: 5.3838816
Base.precompile(Tuple{typeof(fast_dot),Vector{Float64},SparseVector{Float64, Int64}})   # time: 0.004435971
Base.precompile(Tuple{typeof(line_search_wrapper),Shortstep,Int64,Function,Function,Vector{Float64},Vector{Float64},SparseVector{Float64, Int64},Float64,Int64,Int64,Float64,Int64,Float64})   # time: 0.002404597
Base.precompile(Tuple{typeof(line_search_wrapper),Shortstep,Int64,Function,Function,ScaledHotVector{Float64},Vector{Float64},SparseVector{Float64, Int64},Float64,Int64,Int64,Float64,Int64,Float64})   # time: 0.002383438
Base.precompile(Tuple{Core.kwftype(typeof(lazified_conditional_gradient)),NamedTuple{(:epsilon, :max_iteration, :print_iter, :trajectory, :verbose, :linesearch_tol, :line_search, :emphasis, :gradient), Tuple{Float64, Int64, Float64, Bool, Bool, Float64, Adaptive, Emphasis, SparseArrays.SparseMatrixCSC{Float64, Int64}}},typeof(lazified_conditional_gradient),Function,Function,NuclearNormLMO{Float64},RankOneMatrix{Float64, Vector{Float64}, Vector{Float64}}})   # time: 1.1163838
Base.precompile(Tuple{Core.kwftype(typeof(away_frank_wolfe)),NamedTuple{(:epsilon, :max_iteration, :print_iter, :trajectory, :verbose, :linesearch_tol, :lazy, :line_search, :emphasis), Tuple{Float64, Int64, Float64, Bool, Bool, Float64, Bool, Adaptive, Emphasis}},typeof(away_frank_wolfe),Function,Function,NuclearNormLMO{Float64},RankOneMatrix{Float64, Vector{Float64}, Vector{Float64}}})   # time: 3.6690128
Base.precompile(Tuple{typeof(active_set_update!),ActiveSet{RankOneMatrix{Float64, Vector{Float64}, Vector{Float64}}, Float64, Matrix{Float64}},Float64,RankOneMatrix{Float64, Vector{Float64}, Vector{Float64}},Bool,Nothing})   # time: 0.10526101
Base.precompile(Tuple{typeof(active_set_update!),ActiveSet{RankOneMatrix{Float64, Vector{Float64}, Vector{Float64}}, Float64, Matrix{Float64}},Float64,RankOneMatrix{Float64, Vector{Float64}, Vector{Float64}},Bool,Int64})   # time: 0.03874479
Base.precompile(Tuple{typeof(line_search_wrapper),Adaptive,Int64,Function,Function,Matrix{Float64},Matrix{Float64},Matrix{Float64},Float64,Float64,Int64,Float64,Int64,Int64})   # time: 0.018111425
Base.precompile(Tuple{typeof(line_search_wrapper),Adaptive,Int64,Function,Function,Matrix{Float64},Matrix{Float64},Matrix{Float64},Float64,Float64,Int64,Float64,Int64,Float64})   # time: 0.010992155
Base.precompile(Tuple{Core.kwftype(typeof(lazy_afw_step)),NamedTuple{(:K,), Tuple{Float64}},typeof(lazy_afw_step),Matrix{Float64},Matrix{Float64},NuclearNormLMO{Float64},ActiveSet{RankOneMatrix{Float64, Vector{Float64}, Vector{Float64}}, Float64, Matrix{Float64}},Float64})   # time: 0.008281138
Base.precompile(Tuple{Core.kwftype(typeof(blended_conditional_gradient)),NamedTuple{(:epsilon, :max_iteration, :print_iter, :trajectory, :verbose, :linesearch_tol, :line_search, :emphasis), Tuple{Float64, Int64, Float64, Bool, Bool, Float64, Adaptive, Emphasis}},typeof(blended_conditional_gradient),Function,Function,NuclearNormLMO{Float64},RankOneMatrix{Float64, Vector{Float64}, Vector{Float64}}})   # time: 1.6005073
Base.precompile(Tuple{typeof(print_callback),Tuple{String, String, Float64, Any, Any, Float64, Float64, Int64, Int64},String})   # time: 0.003405634
Base.precompile(Tuple{Core.kwftype(typeof(lp_separation_oracle)),NamedTuple{(:inplace_loop, :force_fw_step), Tuple{Bool, Bool}},typeof(lp_separation_oracle),NuclearNormLMO{Float64},ActiveSet{RankOneMatrix{Float64, Vector{Float64}, Vector{Float64}}, Float64, Matrix{Float64}},Matrix{Float64},Float64,Float64})   # time: 0.001198045
Base.precompile(Tuple{Core.kwftype(typeof(blended_pairwise_conditional_gradient)),NamedTuple{(:epsilon, :max_iteration, :print_iter, :trajectory, :verbose, :linesearch_tol, :line_search, :emphasis), Tuple{Float64, Int64, Float64, Bool, Bool, Float64, Adaptive, Emphasis}},typeof(blended_pairwise_conditional_gradient),Function,Function,NuclearNormLMO{Float64},RankOneMatrix{Float64, Vector{Float64}, Vector{Float64}}})   # time: 0.7112858
Base.precompile(Tuple{typeof(line_search_wrapper),Adaptive,Int64,Function,Function,SparseVector{Float64, Int64},SparseVector{Float64, Int64},Vector{Float64},Float64,Float64,Int64,Float64,Int64,Int64})   # time: 0.016679563
Base.precompile(Tuple{typeof(line_search_wrapper),Adaptive,Int64,Function,Function,SparseVector{Float64, Int64},SparseVector{Float64, Int64},Vector{Float64},Float64,Float64,Int64,Float64,Int64,Float64})   # time: 0.38120192
Base.precompile(Tuple{Core.kwftype(typeof(lp_separation_oracle)),NamedTuple{(:inplace_loop, :force_fw_step), Tuple{Bool, Bool}},typeof(lp_separation_oracle),LpNormLMO{Float64, 1},ActiveSet{ScaledHotVector{Float64}, Float64, SparseVector{Float64, Int64}},SparseVector{Float64, Int64},Float64,Float64})   # time: 0.15227416
Base.precompile(Tuple{Core.kwftype(typeof(adaptive_step_size)),NamedTuple{(:gamma_max, :upgrade_accuracy), Tuple{Float64, Bool}},typeof(adaptive_step_size),Function,Function,SparseVector{Float64, Int64},SparseVector{Float64, Int64},SparseVector{Float64, Int64},Nothing})   # time: 0.007469856
Base.precompile(Tuple{Core.kwftype(typeof(adaptive_step_size)),NamedTuple{(:gamma_max, :upgrade_accuracy), Tuple{Float64, Bool}},typeof(adaptive_step_size),Function,Function,SparseVector{Float64, Int64},SparseVector{Float64, Int64},SparseVector{Float64, Int64},Float64})   # time: 0.001203851
